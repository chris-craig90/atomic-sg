// Color Functions
//
//
// ##### `solid-hex( $color, $background );`
// Converts an rgba color value to a solid hex based on the background color.
//
// <code class="sg-code">
// color : solid-hex( rgba(0,0,0,0.87), #3f51b5 );
// </code>
//
// | Parameter   | Type      | Default Value | Description              |
// |-------------|-----------|---------------|--------------------------|
// | $color      | rgba()    | None          | Font color               |
// | $background | hex color | None          | Background color of text |
//
// <div class="u-mb--2"></div>
//
//
// ##### `get-txt-colour( $color, $txt-type);`
// Determines the correct text color based on the background color and text importance. See section 1.3.2 for details on correct opacity levels for text.
//
// <code class="sg-code">
// color: get-txt-colour(#3f51b5, 'secondary');<br>
// color: get-txt-colour($color-prime, 'secondary');
// </code>
//
// | Parameter   | Type             | Default Value | Description                                                                                                    |
// |-------------|------------------|---------------|----------------------------------------------------------------------------------------------------------------|
// | $color      | Hex or rgb value | None          | Background color                                                                                               |
// | $background | String           | None          | relates to the importance of the text. Available options are: <br> prime, secondary, disabled, icons, dividers |
//
// <div class="u-mb--2"></div>
//
//
// Styleguide 1.3.4

// styleguide:ignore:start

// Opacity Values for Text on light/ daerk BG's
$txt-colors: (
  'dark': (
    'prime'   : rgba(0,0,0,0.87),
    'sec'     : rgba(0,0,0,0.54),
    'tertiary': rgba(0,0,0,0.38),
    'dividers': rgba(0,0,0,0.12)
  ),
  'light': (
    'prime'   : rgba(255, 255, 255, 1),
    'sec'     : rgba(255, 255, 255, 0.70),
    'tertiary': rgba(255, 255, 255, 0.50),
    'dividers': rgba(255, 255, 255, 0.12)
  )
);


// Convert RGBA to Solid HEX
// ================================
@function solid-hex( $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color : mix($opaque, $background, $percent);
  @return $solid-color;
}


// Get Text Color
// ================================
@function get-txt-colour( $color, $txt-type){
  $bgColor  : $color;

  $darkTxt  : map-get($txt-colors, dark);
  $lightTxt : map-get($txt-colors, light);


  $txt-color : ''; // THis will be retunred at end of funciton
  // Determine oif BG colour is light or dark

  //@if (lightness($bgColor) > 50) {
  @if (contrast_ratio( $bgColor, rgba(0,0,0,0.87) ) >= 4.5) {
    // Set Text Importance Level
    @if ($txt-type == 'prime')         { $txt-color : solid-hex( rgba(0,0,0,0.87), $bgColor ); }
    @elseif  ($txt-type == 'secondary'){ $txt-color : solid-hex( rgba(0,0,0,0.54), $bgColor ); }
    @elseif ($txt-type == 'disabled')  { $txt-color : solid-hex( rgba(0,0,0,0.38), $bgColor ); }
    @elseif ($txt-type == 'icons')     { $txt-color : solid-hex( rgba(0,0,0,0.38), $bgColor ); }
    @elseif ($txt-type == 'dividers')  { $txt-color : solid-hex( rgba(0,0,0,0.12), $bgColor ); }

    // Link colours
    @elseif ( $txt-type == 'hiLgt' and $bgColor != $color-prime and $bgColor != $color-prime--lgt and $bgColor != $color-prime--drk )  {  $txt-color : text-contrast($bgColor, $color-prime); }
    @elseif ( $txt-type == 'hiLgt' and ( $bgColor == $color-prime or $bgColor == $color-prime--lgt or $bgColor == $color-prime--drk ) )  {  $txt-color : text-contrast($bgColor, $color-accent); }

}@else {
    // Set Text Importance Level
    @if $txt-type == 'prime'    {      $txt-color : solid-hex( rgba(255,255,255,1), $bgColor    ); }
    @else if $txt-type == 'secondary'{ $txt-color : solid-hex( rgba(255,255,255,0.70), $bgColor ); }
    @else if $txt-type == 'disabled' { $txt-color : solid-hex( rgba(255,255,255,0.50), $bgColor ); }
    @else if $txt-type == 'icons'    { $txt-color : solid-hex( rgba(255,255,255,0.50), $bgColor ); }
    @else if $txt-type == 'dividers' { $txt-color : solid-hex( rgba(255,255,255,0.12), $bgColor ); }

    // LInk Colours
    @elseif ( $txt-type == 'hiLgt' and $bgColor != $color-prime and $bgColor != $color-prime--lgt and $bgColor != $color-prime--drk )  {  $txt-color : text-contrast($bgColor, $color-prime); }
    @elseif ( $txt-type == 'hiLgt' and ( $bgColor == $color-prime or $bgColor == $color-prime--lgt or $bgColor == $color-prime--drk ) )  {  $txt-color : text-contrast($bgColor, $color-accent); }

  }

  @return $txt-color;
}



@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}
@function luma($color){
  // Thanks voxpelli for a very concise implementation of luminance measure in sass
  // Adapted from: https://gist.github.com/voxpelli/6304812
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();
  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;
    $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));
    $rgba2: append($rgba2, $rgb);
  }
  @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;
}

@function contrast_ratio($color1, $color2) {
  $luma1: luma($color1) + 5;
  $luma2: luma($color2) + 5;
  $ratio: $luma1 / $luma2;
  @if $luma1 < $luma2 {
    $ratio: 1 / $ratio;
  }
  @return $ratio;
}

@function text-contrast($color, $bgcolor: $color) {
  $threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA
  $list: 10 20 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100;
  //$list: 20 30 40 50 60 70 80 90 100;
  @each $percent in $list {
    $lighter: lighten($bgcolor, $percent);
    $darker: darken($bgcolor, $percent);
    $darker-ratio: contrast_ratio($color, $darker);
    $lighter-ratio: contrast_ratio($color, $lighter);
    @if($lighter-ratio > $darker-ratio){
      @if ($lighter-ratio >= $threshold){
        @return $lighter;
      }
    }
    @if($darker-ratio > $lighter-ratio){
      @if ($darker-ratio >= $threshold){
        @return $darker;
      }
    }
  }
  @return if(lightness($color) < 51, #FFF, #000);
}


// styleguide:ignore:end
